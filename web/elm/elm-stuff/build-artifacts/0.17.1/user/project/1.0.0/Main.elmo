var _user$project$Main$connect_room = function (rid) {
	return _user$project$JSPhoenix$connect(
		{
			topic: 'reflection',
			timeout_ms: _elm_lang$core$Maybe$Nothing,
			chanCloseCB: _elm_lang$core$Maybe$Nothing,
			chanErrorCB: _elm_lang$core$Maybe$Nothing,
			syncState: _elm_lang$core$Maybe$Just(
				{
					portName: 'onRoomSyncState',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				}),
			syncJoin: _elm_lang$core$Maybe$Just(
				{
					portName: 'onRoomSyncJoin',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				}),
			syncLeave: _elm_lang$core$Maybe$Just(
				{
					portName: 'onRoomSyncLeave',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				}),
			joinData: _elm_lang$core$Json_Encode$null,
			joinEvents: _elm_lang$core$Native_List.fromArray(
				[
					{
					portName: 'onRoomConnect',
					msgID: 'ok',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				}
				]),
			onPorts: _elm_lang$core$Native_List.fromArray(
				[
					{
					portName: 'onRoomInfo',
					msgID: 'room:info',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				},
					{
					portName: 'onRoomMsgsInit',
					msgID: 'msgs:init',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				},
					{
					portName: 'onRoomMsgsAdd',
					msgID: 'msgs:add',
					cb_data: _elm_lang$core$Json_Encode$int(rid)
				}
				])
		});
};
var _user$project$Main$initModel = {id: 0, date: '', author: '', text: '', published: false};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$onRoomConnect = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomConnect',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'msgs',
									_elm_lang$core$Json_Decode$list(
										A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'date', _elm_lang$core$Json_Decode$string),
											function (date) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(_elm_lang$core$Json_Decode_ops[':='], 'markdown', _elm_lang$core$Json_Decode$string),
													function (markdown) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															A2(_elm_lang$core$Json_Decode_ops[':='], 'author', _elm_lang$core$Json_Decode$string),
															function (author) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'read_cnt', _elm_lang$core$Json_Decode$int),
																	function (read_cnt) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'published', _elm_lang$core$Json_Decode$bool),
																			function (published) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'inserted_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (inserted_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(
																								_elm_lang$core$Json_Decode_ops[':='],
																								'updated_at',
																								A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																									function (year) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(
																												_elm_lang$core$Json_Decode_ops[':='],
																												'timezone',
																												A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																													function (until) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																															function (offset_utc) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																																	function (offset_std) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																			function (full_name) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																					function (from) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																							function (abbreviation) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																							});
																																					});
																																			});
																																	});
																															});
																													})),
																											function (timezone) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																													function (second) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																															function (month) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																																	function (minute) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																			function (millisecond) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																					function (hour) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																							function (day) {
																																								return A2(
																																									_elm_lang$core$Json_Decode$andThen,
																																									A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																									function (calendar) {
																																										return _elm_lang$core$Json_Decode$succeed(
																																											{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																									});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									})),
																							function (updated_at) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{date: date, markdown: markdown, author: author, read_cnt: read_cnt, published: published, inserted_at: inserted_at, updated_at: updated_at});
																							});
																					});
																			});
																	});
															});
													});
											}))),
								function (msgs) {
									return _elm_lang$core$Json_Decode$succeed(
										{msgs: msgs});
								})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'cb_data',
									A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'date', _elm_lang$core$Json_Decode$string),
										function (date) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'markdown', _elm_lang$core$Json_Decode$string),
												function (markdown) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'author', _elm_lang$core$Json_Decode$string),
														function (author) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'read_cnt', _elm_lang$core$Json_Decode$int),
																function (read_cnt) {
																	return A2(
																		_elm_lang$core$Json_Decode$andThen,
																		A2(_elm_lang$core$Json_Decode_ops[':='], 'published', _elm_lang$core$Json_Decode$bool),
																		function (published) {
																			return A2(
																				_elm_lang$core$Json_Decode$andThen,
																				A2(
																					_elm_lang$core$Json_Decode_ops[':='],
																					'inserted_at',
																					A2(
																						_elm_lang$core$Json_Decode$andThen,
																						A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																						function (year) {
																							return A2(
																								_elm_lang$core$Json_Decode$andThen,
																								A2(
																									_elm_lang$core$Json_Decode_ops[':='],
																									'timezone',
																									A2(
																										_elm_lang$core$Json_Decode$andThen,
																										A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																										function (until) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																												function (offset_utc) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																														function (offset_std) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																function (full_name) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																		function (from) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																				function (abbreviation) {
																																					return _elm_lang$core$Json_Decode$succeed(
																																						{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																				});
																																		});
																																});
																														});
																												});
																										})),
																								function (timezone) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																										function (second) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																												function (month) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																														function (minute) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																function (millisecond) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																		function (hour) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																				function (day) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																						function (calendar) {
																																							return _elm_lang$core$Json_Decode$succeed(
																																								{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																						});
																																				});
																																		});
																																});
																														});
																												});
																										});
																								});
																						})),
																				function (inserted_at) {
																					return A2(
																						_elm_lang$core$Json_Decode$andThen,
																						A2(
																							_elm_lang$core$Json_Decode_ops[':='],
																							'updated_at',
																							A2(
																								_elm_lang$core$Json_Decode$andThen,
																								A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																								function (year) {
																									return A2(
																										_elm_lang$core$Json_Decode$andThen,
																										A2(
																											_elm_lang$core$Json_Decode_ops[':='],
																											'timezone',
																											A2(
																												_elm_lang$core$Json_Decode$andThen,
																												A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																												function (until) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																														function (offset_utc) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																																function (offset_std) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																		function (full_name) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																				function (from) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																						function (abbreviation) {
																																							return _elm_lang$core$Json_Decode$succeed(
																																								{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																						});
																																				});
																																		});
																																});
																														});
																												})),
																										function (timezone) {
																											return A2(
																												_elm_lang$core$Json_Decode$andThen,
																												A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																												function (second) {
																													return A2(
																														_elm_lang$core$Json_Decode$andThen,
																														A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																														function (month) {
																															return A2(
																																_elm_lang$core$Json_Decode$andThen,
																																A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																																function (minute) {
																																	return A2(
																																		_elm_lang$core$Json_Decode$andThen,
																																		A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																		function (millisecond) {
																																			return A2(
																																				_elm_lang$core$Json_Decode$andThen,
																																				A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																				function (hour) {
																																					return A2(
																																						_elm_lang$core$Json_Decode$andThen,
																																						A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																						function (day) {
																																							return A2(
																																								_elm_lang$core$Json_Decode$andThen,
																																								A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																								function (calendar) {
																																									return _elm_lang$core$Json_Decode$succeed(
																																										{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																								});
																																						});
																																				});
																																		});
																																});
																														});
																												});
																										});
																								})),
																						function (updated_at) {
																							return _elm_lang$core$Json_Decode$succeed(
																								{date: date, markdown: markdown, author: author, read_cnt: read_cnt, published: published, inserted_at: inserted_at, updated_at: updated_at});
																						});
																				});
																		});
																});
														});
												});
										})),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomInfo = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomInfo',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							_elm_lang$core$Json_Decode$succeed(
								{})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomMsgsInit = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomMsgsInit',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'msgs',
									_elm_lang$core$Json_Decode$list(
										A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'date', _elm_lang$core$Json_Decode$string),
											function (date) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(_elm_lang$core$Json_Decode_ops[':='], 'markdown', _elm_lang$core$Json_Decode$string),
													function (markdown) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															A2(_elm_lang$core$Json_Decode_ops[':='], 'author', _elm_lang$core$Json_Decode$string),
															function (author) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'read_cnt', _elm_lang$core$Json_Decode$int),
																	function (read_cnt) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'published', _elm_lang$core$Json_Decode$bool),
																			function (published) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'inserted_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (inserted_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(
																								_elm_lang$core$Json_Decode_ops[':='],
																								'updated_at',
																								A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																									function (year) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(
																												_elm_lang$core$Json_Decode_ops[':='],
																												'timezone',
																												A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																													function (until) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																															function (offset_utc) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																																	function (offset_std) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																			function (full_name) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																					function (from) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																							function (abbreviation) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																							});
																																					});
																																			});
																																	});
																															});
																													})),
																											function (timezone) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																													function (second) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																															function (month) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																																	function (minute) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																			function (millisecond) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																					function (hour) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																							function (day) {
																																								return A2(
																																									_elm_lang$core$Json_Decode$andThen,
																																									A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																									function (calendar) {
																																										return _elm_lang$core$Json_Decode$succeed(
																																											{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																									});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									})),
																							function (updated_at) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{date: date, markdown: markdown, author: author, read_cnt: read_cnt, published: published, inserted_at: inserted_at, updated_at: updated_at});
																							});
																					});
																			});
																	});
															});
													});
											}))),
								function (msgs) {
									return _elm_lang$core$Json_Decode$succeed(
										{msgs: msgs});
								})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomMsgsAdd = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomMsgsAdd',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(
									_elm_lang$core$Json_Decode_ops[':='],
									'msgs',
									_elm_lang$core$Json_Decode$list(
										A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'date', _elm_lang$core$Json_Decode$string),
											function (date) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(_elm_lang$core$Json_Decode_ops[':='], 'markdown', _elm_lang$core$Json_Decode$string),
													function (markdown) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															A2(_elm_lang$core$Json_Decode_ops[':='], 'author', _elm_lang$core$Json_Decode$string),
															function (author) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'read_cnt', _elm_lang$core$Json_Decode$int),
																	function (read_cnt) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'published', _elm_lang$core$Json_Decode$bool),
																			function (published) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'inserted_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (inserted_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(
																								_elm_lang$core$Json_Decode_ops[':='],
																								'updated_at',
																								A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																									function (year) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(
																												_elm_lang$core$Json_Decode_ops[':='],
																												'timezone',
																												A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																													function (until) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																															function (offset_utc) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																																	function (offset_std) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																			function (full_name) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																					function (from) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																							function (abbreviation) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																							});
																																					});
																																			});
																																	});
																															});
																													})),
																											function (timezone) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																													function (second) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																															function (month) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																																	function (minute) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																			function (millisecond) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																					function (hour) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																							function (day) {
																																								return A2(
																																									_elm_lang$core$Json_Decode$andThen,
																																									A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																									function (calendar) {
																																										return _elm_lang$core$Json_Decode$succeed(
																																											{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																									});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									})),
																							function (updated_at) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{date: date, markdown: markdown, author: author, read_cnt: read_cnt, published: published, inserted_at: inserted_at, updated_at: updated_at});
																							});
																					});
																			});
																	});
															});
													});
											}))),
								function (msgs) {
									return _elm_lang$core$Json_Decode$succeed(
										{msgs: msgs});
								})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomSyncState = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomSyncState',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							_elm_lang$core$Json_Decode$list(
								A3(
									_elm_lang$core$Json_Decode$tuple2,
									F2(
										function (x1, x2) {
											return {ctor: '_Tuple2', _0: x1, _1: x2};
										}),
									_elm_lang$core$Json_Decode$string,
									A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(
											_elm_lang$core$Json_Decode_ops[':='],
											'metas',
											_elm_lang$core$Json_Decode$list(
												A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(_elm_lang$core$Json_Decode_ops[':='], 'phx_ref', _elm_lang$core$Json_Decode$string),
													function (phx_ref) {
														return A2(
															_elm_lang$core$Json_Decode$andThen,
															A2(_elm_lang$core$Json_Decode_ops[':='], 'loc', _elm_lang$core$Json_Decode$string),
															function (loc) {
																return A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(
																		_elm_lang$core$Json_Decode_ops[':='],
																		'online_at',
																		A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																			function (year) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'timezone',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																							function (until) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																									function (offset_utc) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																											function (offset_std) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																													function (full_name) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																															function (from) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																	function (abbreviation) {
																																		return _elm_lang$core$Json_Decode$succeed(
																																			{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (timezone) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																							function (second) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																									function (month) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																											function (minute) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																													function (millisecond) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																															function (hour) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																	function (day) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																			function (calendar) {
																																				return _elm_lang$core$Json_Decode$succeed(
																																					{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							});
																					});
																			})),
																	function (online_at) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'nick', _elm_lang$core$Json_Decode$string),
																			function (nick) {
																				return _elm_lang$core$Json_Decode$succeed(
																					{phx_ref: phx_ref, loc: loc, online_at: online_at, nick: nick});
																			});
																	});
															});
													}))),
										function (metas) {
											return _elm_lang$core$Json_Decode$succeed(
												{metas: metas});
										})))),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomSyncJoin = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomSyncJoin',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$string),
								function (id) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(
											_elm_lang$core$Json_Decode_ops[':='],
											'old',
											_elm_lang$core$Json_Decode$oneOf(
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
														A2(
														_elm_lang$core$Json_Decode$map,
														_elm_lang$core$Maybe$Just,
														A3(
															_elm_lang$core$Json_Decode$tuple2,
															F2(
																function (x1, x2) {
																	return {ctor: '_Tuple2', _0: x1, _1: x2};
																}),
															_elm_lang$core$Json_Decode$string,
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'phx_ref', _elm_lang$core$Json_Decode$string),
																	function (phx_ref) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'loc', _elm_lang$core$Json_Decode$string),
																			function (loc) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'online_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (online_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'nick', _elm_lang$core$Json_Decode$string),
																							function (nick) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{phx_ref: phx_ref, loc: loc, online_at: online_at, nick: nick});
																							});
																					});
																			});
																	}))))
													]))),
										function (old) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(
													_elm_lang$core$Json_Decode_ops[':='],
													'new',
													_elm_lang$core$Json_Decode$list(
														A3(
															_elm_lang$core$Json_Decode$tuple2,
															F2(
																function (x1, x2) {
																	return {ctor: '_Tuple2', _0: x1, _1: x2};
																}),
															_elm_lang$core$Json_Decode$string,
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'phx_ref', _elm_lang$core$Json_Decode$string),
																	function (phx_ref) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'loc', _elm_lang$core$Json_Decode$string),
																			function (loc) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'online_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (online_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'nick', _elm_lang$core$Json_Decode$string),
																							function (nick) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{phx_ref: phx_ref, loc: loc, online_at: online_at, nick: nick});
																							});
																					});
																			});
																	}))))),
												function ($new) {
													return _elm_lang$core$Json_Decode$succeed(
														{id: id, old: old, $new: $new});
												});
										});
								})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onRoomSyncLeave = _elm_lang$core$Native_Platform.incomingPort(
	'onRoomSyncLeave',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$string),
								function (id) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(
											_elm_lang$core$Json_Decode_ops[':='],
											'old',
											_elm_lang$core$Json_Decode$oneOf(
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
														A2(
														_elm_lang$core$Json_Decode$map,
														_elm_lang$core$Maybe$Just,
														A3(
															_elm_lang$core$Json_Decode$tuple2,
															F2(
																function (x1, x2) {
																	return {ctor: '_Tuple2', _0: x1, _1: x2};
																}),
															_elm_lang$core$Json_Decode$string,
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'phx_ref', _elm_lang$core$Json_Decode$string),
																	function (phx_ref) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'loc', _elm_lang$core$Json_Decode$string),
																			function (loc) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'online_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (online_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'nick', _elm_lang$core$Json_Decode$string),
																							function (nick) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{phx_ref: phx_ref, loc: loc, online_at: online_at, nick: nick});
																							});
																					});
																			});
																	}))))
													]))),
										function (old) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(
													_elm_lang$core$Json_Decode_ops[':='],
													'new',
													_elm_lang$core$Json_Decode$list(
														A3(
															_elm_lang$core$Json_Decode$tuple2,
															F2(
																function (x1, x2) {
																	return {ctor: '_Tuple2', _0: x1, _1: x2};
																}),
															_elm_lang$core$Json_Decode$string,
															_elm_lang$core$Json_Decode$list(
																A2(
																	_elm_lang$core$Json_Decode$andThen,
																	A2(_elm_lang$core$Json_Decode_ops[':='], 'phx_ref', _elm_lang$core$Json_Decode$string),
																	function (phx_ref) {
																		return A2(
																			_elm_lang$core$Json_Decode$andThen,
																			A2(_elm_lang$core$Json_Decode_ops[':='], 'loc', _elm_lang$core$Json_Decode$string),
																			function (loc) {
																				return A2(
																					_elm_lang$core$Json_Decode$andThen,
																					A2(
																						_elm_lang$core$Json_Decode_ops[':='],
																						'online_at',
																						A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'year', _elm_lang$core$Json_Decode$int),
																							function (year) {
																								return A2(
																									_elm_lang$core$Json_Decode$andThen,
																									A2(
																										_elm_lang$core$Json_Decode_ops[':='],
																										'timezone',
																										A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'until', _elm_lang$core$Json_Decode$string),
																											function (until) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_utc', _elm_lang$core$Json_Decode$int),
																													function (offset_utc) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'offset_std', _elm_lang$core$Json_Decode$int),
																															function (offset_std) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'full_name', _elm_lang$core$Json_Decode$string),
																																	function (full_name) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'from', _elm_lang$core$Json_Decode$string),
																																			function (from) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'abbreviation', _elm_lang$core$Json_Decode$string),
																																					function (abbreviation) {
																																						return _elm_lang$core$Json_Decode$succeed(
																																							{until: until, offset_utc: offset_utc, offset_std: offset_std, full_name: full_name, from: from, abbreviation: abbreviation});
																																					});
																																			});
																																	});
																															});
																													});
																											})),
																									function (timezone) {
																										return A2(
																											_elm_lang$core$Json_Decode$andThen,
																											A2(_elm_lang$core$Json_Decode_ops[':='], 'second', _elm_lang$core$Json_Decode$int),
																											function (second) {
																												return A2(
																													_elm_lang$core$Json_Decode$andThen,
																													A2(_elm_lang$core$Json_Decode_ops[':='], 'month', _elm_lang$core$Json_Decode$int),
																													function (month) {
																														return A2(
																															_elm_lang$core$Json_Decode$andThen,
																															A2(_elm_lang$core$Json_Decode_ops[':='], 'minute', _elm_lang$core$Json_Decode$int),
																															function (minute) {
																																return A2(
																																	_elm_lang$core$Json_Decode$andThen,
																																	A2(_elm_lang$core$Json_Decode_ops[':='], 'millisecond', _elm_lang$core$Json_Decode$int),
																																	function (millisecond) {
																																		return A2(
																																			_elm_lang$core$Json_Decode$andThen,
																																			A2(_elm_lang$core$Json_Decode_ops[':='], 'hour', _elm_lang$core$Json_Decode$int),
																																			function (hour) {
																																				return A2(
																																					_elm_lang$core$Json_Decode$andThen,
																																					A2(_elm_lang$core$Json_Decode_ops[':='], 'day', _elm_lang$core$Json_Decode$int),
																																					function (day) {
																																						return A2(
																																							_elm_lang$core$Json_Decode$andThen,
																																							A2(_elm_lang$core$Json_Decode_ops[':='], 'calendar', _elm_lang$core$Json_Decode$string),
																																							function (calendar) {
																																								return _elm_lang$core$Json_Decode$succeed(
																																									{year: year, timezone: timezone, second: second, month: month, minute: minute, millisecond: millisecond, hour: hour, day: day, calendar: calendar});
																																							});
																																					});
																																			});
																																	});
																															});
																													});
																											});
																									});
																							})),
																					function (online_at) {
																						return A2(
																							_elm_lang$core$Json_Decode$andThen,
																							A2(_elm_lang$core$Json_Decode_ops[':='], 'nick', _elm_lang$core$Json_Decode$string),
																							function (nick) {
																								return _elm_lang$core$Json_Decode$succeed(
																									{phx_ref: phx_ref, loc: loc, online_at: online_at, nick: nick});
																							});
																					});
																			});
																	}))))),
												function ($new) {
													return _elm_lang$core$Json_Decode$succeed(
														{id: id, old: old, $new: $new});
												});
										});
								})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$int),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$portSubmit = _elm_lang$core$Native_Platform.outgoingPort(
	'portSubmit',
	function (v) {
		return {id: v.id, date: v.date, author: v.author, text: v.text, published: v.published};
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'InitRefl':
				var _p1 = _p0._0;
				var foo = A2(_elm_lang$core$Debug$log, 'INIT REFL', _p1);
				return {ctor: '_Tuple2', _0: _p1, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ReflectionDate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{date: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionAuthor':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{author: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionText':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{text: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SubmitReflection':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$portSubmit(model)
				};
			default:
				var _p2 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{published: _p2});
				var foo = A2(_elm_lang$core$Debug$log, 'PUBLISHED', _p2);
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$portSubmit(newModel)
				};
		}
	});
var _user$project$Main$portReflection = _elm_lang$core$Native_Platform.incomingPort(
	'portReflection',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int),
		function (id) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'date', _elm_lang$core$Json_Decode$string),
				function (date) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(_elm_lang$core$Json_Decode_ops[':='], 'author', _elm_lang$core$Json_Decode$string),
						function (author) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'text', _elm_lang$core$Json_Decode$string),
								function (text) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'published', _elm_lang$core$Json_Decode$bool),
										function (published) {
											return _elm_lang$core$Json_Decode$succeed(
												{id: id, date: date, author: author, text: text, published: published});
										});
								});
						});
				});
		}));
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {id: a, date: b, author: c, text: d, published: e};
	});
var _user$project$Main$RoomSyncMeta = F4(
	function (a, b, c, d) {
		return {phx_ref: a, loc: b, online_at: c, nick: d};
	});
var _user$project$Main$RoomSyncEvent = F3(
	function (a, b, c) {
		return {id: a, old: b, $new: c};
	});
var _user$project$Main$RoomMessage = F7(
	function (a, b, c, d, e, f, g) {
		return {date: a, markdown: b, author: c, read_cnt: d, published: e, inserted_at: f, updated_at: g};
	});
var _user$project$Main$RoomMessages = function (a) {
	return {msgs: a};
};
var _user$project$Main$ModelFormatted = F4(
	function (a, b, c, d) {
		return {cb_data: a, msg: b, msgID: c, topic: d};
	});
var _user$project$Main$Published = function (a) {
	return {ctor: 'Published', _0: a};
};
var _user$project$Main$showText = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('preview')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Preview  '),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
										{ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('( published')
							])),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$type$('checkbox'),
								_elm_lang$html$Html_Attributes$checked(model.published),
								_elm_lang$html$Html_Events$onCheck(_user$project$Main$Published)
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
										{ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(')')
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('md-text')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_evancz$elm_markdown$Markdown$toHtml,
						_elm_lang$core$Native_List.fromArray(
							[]),
						model.text)
					]))
			]));
};
var _user$project$Main$ReflectionText = function (a) {
	return {ctor: 'ReflectionText', _0: a};
};
var _user$project$Main$inputText = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('refl-textarea')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$textarea,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-text'),
						_elm_lang$html$Html_Attributes$name('reflection-text'),
						_elm_lang$html$Html_Attributes$placeholder('Use Markdown formatting'),
						_elm_lang$html$Html_Attributes$value(model.text),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionText),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$ReflectionAuthor = function (a) {
	return {ctor: 'ReflectionAuthor', _0: a};
};
var _user$project$Main$inputAuthor = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-author'),
						_elm_lang$html$Html_Attributes$name('reflection-author'),
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Your name'),
						_elm_lang$html$Html_Attributes$value(model.author),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionAuthor),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$ReflectionDate = function (a) {
	return {ctor: 'ReflectionDate', _0: a};
};
var _user$project$Main$inputDate = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-date'),
						_elm_lang$html$Html_Attributes$name('reflection-date'),
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Reflection Date'),
						_elm_lang$html$Html_Attributes$value(model.date),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionDate),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$InitRefl = function (a) {
	return {ctor: 'InitRefl', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$portReflection(_user$project$Main$InitRefl)
			]));
};
var _user$project$Main$SubmitReflection = {ctor: 'SubmitReflection'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('refl-edit')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$inputDate(model),
				_user$project$Main$inputAuthor(model),
				_user$project$Main$inputText(model),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('refl-buttons')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$SubmitReflection)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Submit')
									]))
							]))
					])),
				_user$project$Main$showText(model)
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
