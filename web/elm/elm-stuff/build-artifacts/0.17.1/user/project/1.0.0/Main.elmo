var _user$project$Main$showAnimation = A2(
	_elm_lang$svg$Svg$svg,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$svg$Svg_Attributes$width('100%'),
			_elm_lang$svg$Svg_Attributes$height('100%'),
			_elm_lang$svg$Svg_Attributes$viewBox('0 0 320 180'),
			_elm_lang$svg$Svg_Attributes$class('letters letters--effect-1')
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$svg$Svg$g,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$svg$Svg_Attributes$class('letter letter--1')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$svg$Svg$g,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$svg$Svg_Attributes$class('letter__part')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$svg$Svg$path,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$svg$Svg_Attributes$d('M25,39.7l22.4,51l7.9-32.2L76.2,84l1.3-61.2'),
									_elm_lang$svg$Svg_Attributes$class('letter__layer color-6')
								]),
							_elm_lang$core$Native_List.fromArray(
								[])),
							A2(
							_elm_lang$svg$Svg$path,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$svg$Svg_Attributes$d('M25,39.7l22.4,51l7.9-32.2L76.2,84l1.3-61.2'),
									_elm_lang$svg$Svg_Attributes$class('letter__layer color-1')
								]),
							_elm_lang$core$Native_List.fromArray(
								[])),
							A2(
							_elm_lang$svg$Svg$path,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$svg$Svg_Attributes$d('M25,39.7l22.4,51l7.9-32.2L76.2,84l1.3-61.2'),
									_elm_lang$svg$Svg_Attributes$class('letter__layer color-2')
								]),
							_elm_lang$core$Native_List.fromArray(
								[]))
						]))
				]))
		]));
var _user$project$Main$pushRoomMsg = function (model) {
	var msg_send_push = {
		topic: 'reflection',
		mid: 'submit',
		msg: _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'date',
					_1: _elm_lang$core$Json_Encode$string(model.date)
				},
					{
					ctor: '_Tuple2',
					_0: 'markdown',
					_1: _elm_lang$core$Json_Encode$string(model.markdown)
				},
					{
					ctor: '_Tuple2',
					_0: 'author',
					_1: _elm_lang$core$Json_Encode$string(model.author)
				},
					{
					ctor: '_Tuple2',
					_0: 'published',
					_1: _elm_lang$core$Json_Encode$bool(model.published)
				}
				])),
		pushEvents: _elm_lang$core$Native_List.fromArray(
			[
				{
				portName: 'onMsgSent',
				msgID: 'ok',
				cb_data: _elm_lang$core$Json_Encode$string('ok')
			},
				{
				portName: 'onMsgError',
				msgID: 'error',
				cb_data: _elm_lang$core$Json_Encode$string('error')
			},
				{
				portName: 'onMsgTimeout',
				msgID: 'timeout',
				cb_data: _elm_lang$core$Json_Encode$string('timeout')
			},
				{
				portName: 'onMsgSent',
				msgID: 'reply',
				cb_data: _elm_lang$core$Json_Encode$string(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'This is a reply from ',
						A2(_elm_lang$core$Basics_ops['++'], model.author, '\'s submission!')))
			}
			])
	};
	return _user$project$JSPhoenix$push(msg_send_push);
};
var _user$project$Main$pushRoomLoginMsg = function (model) {
	var msg_send_push = {
		topic: 'reflection',
		mid: 'login',
		msg: _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'email',
					_1: _elm_lang$core$Json_Encode$string(model.email)
				}
				])),
		pushEvents: _elm_lang$core$Native_List.fromArray(
			[
				{
				portName: 'onMsgSent',
				msgID: 'ok',
				cb_data: _elm_lang$core$Json_Encode$string('ok')
			},
				{
				portName: 'onMsgError',
				msgID: 'error',
				cb_data: _elm_lang$core$Json_Encode$string('error')
			},
				{
				portName: 'onMsgTimeout',
				msgID: 'timeout',
				cb_data: _elm_lang$core$Json_Encode$string('timeout')
			},
				{
				portName: 'onMsgSent',
				msgID: 'reply',
				cb_data: _elm_lang$core$Json_Encode$string(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'This is a reply from ',
						A2(_elm_lang$core$Basics_ops['++'], model.author, '\'s submission!')))
			}
			])
	};
	return _user$project$JSPhoenix$push(msg_send_push);
};
var _user$project$Main$connect_room = _user$project$JSPhoenix$connect(
	{
		topic: 'reflection',
		timeout_ms: _elm_lang$core$Maybe$Nothing,
		chanCloseCB: _elm_lang$core$Maybe$Nothing,
		chanErrorCB: _elm_lang$core$Maybe$Nothing,
		syncState: _elm_lang$core$Maybe$Nothing,
		syncJoin: _elm_lang$core$Maybe$Nothing,
		syncLeave: _elm_lang$core$Maybe$Nothing,
		joinData: _elm_lang$core$Json_Encode$null,
		joinEvents: _elm_lang$core$Native_List.fromArray(
			[]),
		onPorts: _elm_lang$core$Native_List.fromArray(
			[])
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ConnectClickMsg':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$connect_room};
			case 'InitRefl':
				var _p1 = _p0._0;
				var foo = A2(_elm_lang$core$Debug$log, 'INIT REFL', _p1);
				return {ctor: '_Tuple2', _0: _p1, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ReflectionEmail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{email: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionDate':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{date: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionAuthor':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{author: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ReflectionText':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{markdown: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'LoginMsg':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$pushRoomLoginMsg(model)
				};
			case 'SubmitClickMsg':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$pushRoomMsg(model)
				};
			case 'SubmissionReplyMsg':
				var _p2 = A2(_elm_lang$core$Debug$log, 'msg', _p0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p3 = _p0._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{published: _p3});
				var foo = A2(_elm_lang$core$Debug$log, 'PUBLISHED', _p3);
				return {ctor: '_Tuple2', _0: newModel, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$initModel = {id: 0, date: '', author: '', markdown: '', published: false, email: ''};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$onMsgSent = _elm_lang$core$Native_Platform.incomingPort(
	'onMsgSent',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							_elm_lang$core$Json_Decode$succeed(
								{})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$string),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$onMsgReceived = _elm_lang$core$Native_Platform.incomingPort(
	'onMsgReceived',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'topic', _elm_lang$core$Json_Decode$string),
		function (topic) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(_elm_lang$core$Json_Decode_ops[':='], 'msgID', _elm_lang$core$Json_Decode$string),
				function (msgID) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'msg',
							_elm_lang$core$Json_Decode$succeed(
								{})),
						function (msg) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'cb_data', _elm_lang$core$Json_Decode$string),
								function (cb_data) {
									return _elm_lang$core$Json_Decode$succeed(
										{topic: topic, msgID: msgID, msg: msg, cb_data: cb_data});
								});
						});
				});
		}));
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {id: a, date: b, author: c, markdown: d, published: e, email: f};
	});
var _user$project$Main$RoomSyncMeta = F4(
	function (a, b, c, d) {
		return {phx_ref: a, loc: b, online_at: c, nick: d};
	});
var _user$project$Main$RoomSyncEvent = F3(
	function (a, b, c) {
		return {id: a, old: b, $new: c};
	});
var _user$project$Main$RoomMessage = F6(
	function (a, b, c, d, e, f) {
		return {id: a, date: b, markdown: c, author: d, published: e, email: f};
	});
var _user$project$Main$RoomMessages = function (a) {
	return {msgs: a};
};
var _user$project$Main$LoginMsg = {ctor: 'LoginMsg'};
var _user$project$Main$ConnectClickMsg = {ctor: 'ConnectClickMsg'};
var _user$project$Main$SubmissionReplyMsg = function (a) {
	return {ctor: 'SubmissionReplyMsg', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$onMsgSent(_user$project$Main$SubmissionReplyMsg)
			]));
};
var _user$project$Main$SubmitClickMsg = {ctor: 'SubmitClickMsg'};
var _user$project$Main$Published = function (a) {
	return {ctor: 'Published', _0: a};
};
var _user$project$Main$showText = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('preview')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h3,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Preview  '),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
										{ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('( published')
							])),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$type$('checkbox'),
								_elm_lang$html$Html_Attributes$checked(model.published),
								_elm_lang$html$Html_Events$onCheck(_user$project$Main$Published)
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'font-weight', _1: 'normal'},
										{ctor: '_Tuple2', _0: 'font-size', _1: '0.7em'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(')')
							]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('md-text')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_evancz$elm_markdown$Markdown$toHtml,
						_elm_lang$core$Native_List.fromArray(
							[]),
						model.markdown)
					]))
			]));
};
var _user$project$Main$ReflectionEmail = function (a) {
	return {ctor: 'ReflectionEmail', _0: a};
};
var _user$project$Main$inputEmail = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-email'),
						_elm_lang$html$Html_Attributes$name('reflection-email'),
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Reflection Email'),
						_elm_lang$html$Html_Attributes$value(model.email),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionEmail),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$ReflectionText = function (a) {
	return {ctor: 'ReflectionText', _0: a};
};
var _user$project$Main$inputText = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('refl-textarea')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$textarea,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-text'),
						_elm_lang$html$Html_Attributes$name('reflection-text'),
						_elm_lang$html$Html_Attributes$placeholder('Use Markdown formatting'),
						_elm_lang$html$Html_Attributes$value(model.markdown),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionText),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$ReflectionAuthor = function (a) {
	return {ctor: 'ReflectionAuthor', _0: a};
};
var _user$project$Main$inputAuthor = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-author'),
						_elm_lang$html$Html_Attributes$name('reflection-author'),
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Your name'),
						_elm_lang$html$Html_Attributes$value(model.author),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionAuthor),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$ReflectionDate = function (a) {
	return {ctor: 'ReflectionDate', _0: a};
};
var _user$project$Main$inputDate = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('reflection-date'),
						_elm_lang$html$Html_Attributes$name('reflection-date'),
						_elm_lang$html$Html_Attributes$type$('text'),
						_elm_lang$html$Html_Attributes$placeholder('Reflection Date'),
						_elm_lang$html$Html_Attributes$value(model.date),
						_elm_lang$html$Html_Events$onInput(_user$project$Main$ReflectionDate),
						_elm_lang$html$Html_Attributes$autofocus(true)
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			]));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('refl-edit')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$inputEmail(model),
				_user$project$Main$inputDate(model),
				_user$project$Main$inputAuthor(model),
				_user$project$Main$inputText(model),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('refl-buttons')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$SubmitClickMsg)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Submit')
									]))
							])),
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$ConnectClickMsg)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Connect')
									]))
							])),
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$button,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Events$onClick(_user$project$Main$LoginMsg)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Login')
									]))
							]))
					])),
				_user$project$Main$showText(model),
				_user$project$Main$showAnimation
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})
};
var _user$project$Main$InitRefl = function (a) {
	return {ctor: 'InitRefl', _0: a};
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
